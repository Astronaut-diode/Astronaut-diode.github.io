<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言使用uthash.h实现哈希表</title>
    <link href="/2024/09/16/C%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8uthash-h%E5%AE%9E%E7%8E%B0%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2024/09/16/C%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8uthash-h%E5%AE%9E%E7%8E%B0%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">1 前言</h2><p>在C语言中，并没有直接实现哈希表这种数据结构，所以需要借助外部库<ahref="https://github.com/troydhanson/uthash">uthash</a>来实现。</p><h3 id="使用步骤">1.1 使用步骤</h3><ol type="1"><li><p>将文件<strong>src/uthash.h</strong>保存到<strong>/usr/local/include</strong>目录下，并在相应的代码中引入该头文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;uthash.h&quot;</span></span><br></code></pre></td></tr></table></figure></li><li><p>创建我们自己需要的Entry。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hash_entry</span> &#123;</span><br>    $&#123;data_type&#125; key; <span class="hljs-comment">// 代表一组键值对中的键，变量的类型以及变量名都是可以自定义的。</span><br>    $&#123;data_type&#125; value; <span class="hljs-comment">// 代表一组键值对中的值，变量的类型以及变量名都是可以自定义的，并且可以定义多个值对象。</span><br>    UT_hash_handle hh; <span class="hljs-comment">// 用于保存当前entry的元数据，这个是可以认为是固定写法，每一个entry的结构体中都需要有这个变量。</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>创建真正的哈希表指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hash_entry</span> *<span class="hljs-title">hash_header</span> =</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 这其中就记录了多个hash_entry，进而构成了哈希表。</span><br></code></pre></td></tr></table></figure></li><li><p>调用相应的函数即可实现想要的效果，常用的函数接口都已经在第2章中注明。</p></li></ol><h2 id="函数">2 函数</h2><h3 id="插入键值对">2.1 插入键值对</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数1 hh记录的是在Entry中对应的变量名。</span><br><span class="hljs-comment">参数2 head记录的是哈希表指针。</span><br><span class="hljs-comment">参数3 filedname记录的是在Entry中键对应的变量名。</span><br><span class="hljs-comment">参数4 keylen_in记录的是在Entry中键对应的变量的内存大小。</span><br><span class="hljs-comment">参数5 add记录的是待插入到哈希表中的Entry指针。</span><br><span class="hljs-comment">*/</span><br>HASH_ADD(hh,head,fieldname,keylen_in,add)<br></code></pre></td></tr></table></figure><h3 id="删除键值对">2.2 删除键值对</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数1 hh记录的是在Entry中对应的变量名。</span><br><span class="hljs-comment">参数2 head记录的是哈希表指针。</span><br><span class="hljs-comment">参数3 delptr记录的是待删除Entry指针。</span><br><span class="hljs-comment">*/</span><br>HASH_DELETE(hh,head,delptr)<br></code></pre></td></tr></table></figure><h3 id="清空哈希表">2.3 清空哈希表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数1 hh记录的是在Entry中对应的变量名。</span><br><span class="hljs-comment">参数2 head记录的是哈希表指针。</span><br><span class="hljs-comment">*/</span><br> HASH_CLEAR(hh,head)<br></code></pre></td></tr></table></figure><h3 id="查询键值对">2.4 查询键值对</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数1 hh记录的是在Entry中对应的变量名。</span><br><span class="hljs-comment">参数2 head记录的是哈希表指针。</span><br><span class="hljs-comment">    参数3 keyptr记录的是待查询键的内存地址。</span><br><span class="hljs-comment">参数4 keylen记录的是在Entry中键对应的变量的内存大小。</span><br><span class="hljs-comment">参数5 out记录的是Entry指针，用于记录查询结果，如果有结果就填充，没有就是NULL，不需要手动malloc，会将哈希表中保存的Entry地址赋值给out。</span><br><span class="hljs-comment">*/</span><br>HASH_FIND(hh,head,keyptr,keylen,out)<br></code></pre></td></tr></table></figure><h3 id="查询哈希表中有多少键值对">2.5 查询哈希表中有多少键值对</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数1 hh记录的是在Entry中对应的变量名。</span><br><span class="hljs-comment">参数2 head记录的是哈希表指针。</span><br><span class="hljs-comment">返回值 无符号整型。</span><br><span class="hljs-comment">*/</span><br>HASH_CNT(hh,head)<br></code></pre></td></tr></table></figure><h3 id="迭代遍历哈希表">2.6 迭代遍历哈希表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数1 hh记录的是在Entry中对应的变量名。</span><br><span class="hljs-comment">参数2 head记录的是哈希表指针。</span><br><span class="hljs-comment">参数3 el记录的是Entry指针，用于记录当前次的迭代结果。</span><br><span class="hljs-comment">参数4 tmp记录的是Entry指针，用于记录下次的迭代结果。</span><br><span class="hljs-comment">*/</span><br>HASH_ITER(hh,head,el,tmp)<br></code></pre></td></tr></table></figure><h3 id="改变键值对内容">2.7 改变键值对内容</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数1 hh记录的是在Entry中对应的变量名。</span><br><span class="hljs-comment">参数2 head记录的是哈希表指针。</span><br><span class="hljs-comment">参数3 filedname记录的是在Entry中键对应的变量名。</span><br><span class="hljs-comment">参数4 keylen_in记录的是在Entry中键对应的变量的内存大小。</span><br><span class="hljs-comment">参数5 add记录的是待替换到哈希表中的Entry指针。</span><br><span class="hljs-comment">参数6 replaced记录的也是Entry指针，如果有老的历史数据被替换了，那么记录到replaced中，否则内容为NULL。</span><br><span class="hljs-comment">*/</span><br>HASH_REPLACE(hh,head,fieldname,keylen_in,add,replaced)<br></code></pre></td></tr></table></figure><h3 id="哈希表排序">2.8 哈希表排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数1 hh记录的是在Entry中对应的变量名。</span><br><span class="hljs-comment">参数2 head记录的是哈希表指针。</span><br><span class="hljs-comment">参数3 cmpfcn记录的函数指针，是用于排序规则的函数。</span><br><span class="hljs-comment">*/</span><br>HASH_SRT(hh,head,cmpfcn)<br></code></pre></td></tr></table></figure><h2 id="实例">3 实例</h2><p>在这里我们构建如下的结构体代表Entry：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_info</span> &#123;</span><br><span class="hljs-type">int</span> student_id; <span class="hljs-comment">// 代表key。</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">char</span> sex[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> age; <span class="hljs-comment">// 这三个变量代表value。</span><br>    UT_hash_handle student_handle; <span class="hljs-comment">// 代表哈希控制块</span><br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;uthash.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_info</span> &#123;</span><br><span class="hljs-type">int</span> student_id; <span class="hljs-comment">// 代表key。</span><br>    <span class="hljs-type">char</span> student_name[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">char</span> student_sex[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> student_age; <span class="hljs-comment">// 这三个变量代表value。</span><br>    UT_hash_handle student_handle; <span class="hljs-comment">// 代表哈希控制块</span><br>&#125; zs = &#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-number">23</span>&#125;, ls = &#123;<span class="hljs-number">2</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-number">24</span>&#125;, ww = &#123;<span class="hljs-number">3</span>, <span class="hljs-string">&quot;ww&quot;</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-number">25</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sort_rule</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> student_info *old, <span class="hljs-keyword">struct</span> student_info *new)</span> &#123;<br><span class="hljs-keyword">return</span> old-&gt;student_id &gt; new-&gt;student_id;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_info</span> *<span class="hljs-title">student_map_header</span> =</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 构建哈希表的头指针。</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_info</span> *<span class="hljs-title">p_zs</span> =</span> &amp;zs, *p_ls = &amp;ls, *p_ww = &amp;ww;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;将数据插入到哈希表中，注意是乱序的。\n&quot;</span>);<br>HASH_ADD(student_handle, student_map_header, student_id, <span class="hljs-keyword">sizeof</span>(p_ls-&gt;student_id), p_ls);<br>HASH_ADD(student_handle, student_map_header, student_id, <span class="hljs-keyword">sizeof</span>(p_zs-&gt;student_id), p_zs);<br>HASH_ADD(student_handle, student_map_header, student_id, <span class="hljs-keyword">sizeof</span>(p_ww-&gt;student_id), p_ww);<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_info</span> *<span class="hljs-title">ep</span> =</span> <span class="hljs-literal">NULL</span>, *next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;迭代遍历哈希表中的数据,此时的结果按照插入的顺序出现。\n&quot;</span>);<br>HASH_ITER(student_handle, student_map_header, ep, next) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前Entry是%d %s %s %d\n&quot;</span>, ep-&gt;student_id, ep-&gt;student_name, ep-&gt;student_sex, ep-&gt;student_age);<br><span class="hljs-keyword">if</span> (next != <span class="hljs-literal">NULL</span>) <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下个Entry是%d %s %s %d\n&quot;</span>, next-&gt;student_id, next-&gt;student_name, next-&gt;student_sex, next-&gt;student_age);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;对哈希表中的所有数据进行排序，并重新迭代遍历哈希表中的数据。\n&quot;</span>);<br>HASH_SRT(student_handle, student_map_header, sort_rule); <br><br>HASH_ITER(student_handle, student_map_header, ep, next) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前Entry是%d %s %s %d\n&quot;</span>, ep-&gt;student_id, ep-&gt;student_name, ep-&gt;student_sex, ep-&gt;student_age);<br><span class="hljs-keyword">if</span> (next != <span class="hljs-literal">NULL</span>) <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下个Entry是%d %s %s %d\n&quot;</span>, next-&gt;student_id, next-&gt;student_name, next-&gt;student_sex, next-&gt;student_age);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前的哈希表中保存了%d条Entry。\n&quot;</span>, HASH_CNT(student_handle, student_map_header));<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_info</span> *<span class="hljs-title">out</span> =</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 保存查询结果的空间，并不需要手动malloc开辟，否则查到NULL，那不就很尴尬了吗。</span><br><span class="hljs-type">int</span> key = <span class="hljs-number">1</span>;<br>HASH_FIND(student_handle, student_map_header, &amp;key, <span class="hljs-keyword">sizeof</span>(key), out);<br><span class="hljs-keyword">if</span> (out != <span class="hljs-literal">NULL</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;id为1的学生是%d %s %s %d\n&quot;</span>, out-&gt;student_id, out-&gt;student_name, out-&gt;student_sex, out-&gt;student_age);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;并不存在id为1的学生&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除id为1的学生。\n&quot;</span>);<br>HASH_DELETE(student_handle, student_map_header, out);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前的哈希表中保存了%d条Entry。\n&quot;</span>, HASH_CNT(student_handle, student_map_header));<br><br>HASH_FIND(student_handle, student_map_header, &amp;key, <span class="hljs-keyword">sizeof</span>(key), out);<br><span class="hljs-keyword">if</span> (out != <span class="hljs-literal">NULL</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;id为1的学生是%d %s %s %d\n&quot;</span>, out-&gt;student_id, out-&gt;student_name, out-&gt;student_sex, out-&gt;student_age);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;并不存在id为1的学生。\n&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_info</span> *<span class="hljs-title">add_entry</span> =</span> (<span class="hljs-keyword">struct</span> student_info *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> student_info));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_info</span> *<span class="hljs-title">repalce_entry</span> =</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 用于承接结果的，如果确实有原始数据，那么会将目标地址记录到当前指针中。</span><br>add_entry-&gt;student_id = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">strcpy</span>(add_entry-&gt;student_name,<span class="hljs-string">&quot;x&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;将id为2的学生信息进行修改。\n&quot;</span>);<br>HASH_REPLACE(student_handle, student_map_header, student_id, <span class="hljs-keyword">sizeof</span>(add_entry-&gt;student_id), add_entry, repalce_entry);<br><br><span class="hljs-keyword">if</span> (repalce_entry != <span class="hljs-literal">NULL</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原来id为2的学生是%d %s %s %d\n&quot;</span>, repalce_entry-&gt;student_id, repalce_entry-&gt;student_name, repalce_entry-&gt;student_sex, repalce_entry-&gt;student_age);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原来并不存在id为2的学生&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;更新完数据以后重新进行遍历操作。\n&quot;</span>);<br>HASH_ITER(student_handle, student_map_header, ep, next) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前Entry是%d %s %s %d\n&quot;</span>, ep-&gt;student_id, ep-&gt;student_name, ep-&gt;student_sex, ep-&gt;student_age);<br><span class="hljs-keyword">if</span> (next != <span class="hljs-literal">NULL</span>) <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下个Entry是%d %s %s %d\n&quot;</span>, next-&gt;student_id, next-&gt;student_name, next-&gt;student_sex, next-&gt;student_age);<br>&#125;<br><br>HASH_CLEAR(student_handle, student_map_header);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;清空数据以后重新进行遍历操作。\n&quot;</span>);<br>HASH_ITER(student_handle, student_map_header, ep, next) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前Entry是%d %s %s %d\n&quot;</span>, ep-&gt;student_id, ep-&gt;student_name, ep-&gt;student_sex, ep-&gt;student_age);<br><span class="hljs-keyword">if</span> (next != <span class="hljs-literal">NULL</span>) <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下个Entry是%d %s %s %d\n&quot;</span>, next-&gt;student_id, next-&gt;student_name, next-&gt;student_sex, next-&gt;student_age);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前的哈希表中保存了%d条Entry。\n&quot;</span>, HASH_CNT(student_handle, student_map_header));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Usage</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>uthash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode_Two_Sum</title>
    <link href="/2024/09/15/leetcode-Two-Sum/"/>
    <url>/2024/09/15/leetcode-Two-Sum/</url>
    
    <content type="html"><![CDATA[<h3 id="description">Description</h3><p>Given an array of integers <code>nums</code> and an integer<code>target</code>, return <em>indices of the two numbers such thatthey add up to <code>target</code></em>.</p><p>You may assume that each input would have <strong>exactly onesolution</strong>, and you may not use the <em>same</em> elementtwice.</p><p>You can return the answer in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">Input</span>: nums = [<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>], target = <span class="hljs-number">9</span><br><span class="hljs-symbol">Output</span>: [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br><span class="hljs-symbol">Explanation</span>: <span class="hljs-symbol">Because</span> nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] == <span class="hljs-number">9</span>, we return [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>].<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> nums = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>], target = <span class="hljs-number">6</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> nums = [<span class="hljs-number">3</span>,<span class="hljs-number">3</span>], target = <span class="hljs-number">6</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10^4</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li><li><strong>Only one valid answer exists.</strong></li></ul><h3 id="solution-1-暴力解法"><strong>Solution 1</strong>（暴力解法）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>* <span class="hljs-title function_">twoSum</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = numsSize - <span class="hljs-number">1</span>; j &gt; i; j--) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                <span class="hljs-comment">// 返回的内容不能使用局部变量，否则会被释放，所以需要使用malloc在堆上开辟存储空间。</span><br>                <span class="hljs-type">int</span> *res = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">2</span>); <br>                res[<span class="hljs-number">0</span>] = i;<br>                res[<span class="hljs-number">1</span>] = j;<br>                <span class="hljs-comment">// 设置返回数组的长度，这个参数并不是作为返回值返回给调用者，而是以引用传递的方式返回给调用者。</span><br>                *returnSize = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">return</span> res;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="solution-2-哈希表解法"><strong>Solution 2</strong>（哈希表解法）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hash_node</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">int</span> index; <span class="hljs-comment">// 记录目标key对应的index。</span><br>    UT_hash_handle handle; <span class="hljs-comment">// 哈希控制块</span><br>&#125;;<br><br><br><span class="hljs-type">int</span>* <span class="hljs-title function_">twoSum</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hash_node</span> * <span class="hljs-title">hash_map</span> =</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 哈希表的头指针, 放到函数内部，这样多个测试用例时，不会作为全局变量干扰测试结果。</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize; i++) &#123;<br>        <span class="hljs-type">int</span> num = target - nums[i]; <span class="hljs-comment">// 本轮需要找到的目标</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hash_node</span> *<span class="hljs-title">out</span> =</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 不需要手动malloc，查得到就有值，否则就是NULL。</span><br>        HASH_FIND(handle, hash_map, &amp;num, <span class="hljs-keyword">sizeof</span>(num), out);<br>        <span class="hljs-keyword">if</span> (out != <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 如果能查到以num为key的节点，返回结果。</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, out-&gt;num, out-&gt;index);<br>            <span class="hljs-type">int</span> *res = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">2</span>);<br>            res[<span class="hljs-number">0</span>] = i;<br>            res[<span class="hljs-number">1</span>] = out-&gt;index;<br>            *returnSize = <span class="hljs-number">2</span>;<br>            HASH_CLEAR(handle, hash_map); <span class="hljs-comment">// 清空目标hashmap，保证多个测试用例的情况下，不会造成内存泄漏。</span><br>            <span class="hljs-keyword">return</span> res;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 没有找到可以组合的数值，就将当前的值和索引作为键值对插入到哈希表中。</span><br>            <span class="hljs-keyword">struct</span> hash_node *add = (<span class="hljs-keyword">struct</span> hash_node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> hash_node));<br>            add-&gt;num = nums[i];<br>            add-&gt;index = i;<br>            HASH_ADD(handle, hash_map, num, <span class="hljs-keyword">sizeof</span>(add-&gt;num), add);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 对于本题来说，一定是找得到的，不存在返回空指针的情况。</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Question</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>uthash</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令grep详解</title>
    <link href="/2024/09/07/Linux%E5%91%BD%E4%BB%A4grep%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/09/07/Linux%E5%91%BD%E4%BB%A4grep%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="grep基本命令格式">1 grep基本命令格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep [options] pattern [input]<br></code></pre></td></tr></table></figure><p>这条命令的功能就是对<strong>输入源</strong>按照设定的<strong>正则表达式</strong>进行过滤，根据<strong>选项</strong>对结果进行强化，当一段内容已经找到一部分后，会立即从该位置接着重新进行过滤任务，也即前面已经匹配的内容是不再使用的。</p><h2 id="输入源">2 输入源</h2><p>输入源的情况共分为三种，分别是文件、管道符带来的输入、键盘带来的标准输入。为了进行后续测试，我预先创建了两个文件，内容如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> user1.txt <br>user1.txt<br>name: feng.<br>telephone number: 177****2269.<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> user2.txt <br>user2.txt<br>name: lijian.<br>qq: 123456789.<br></code></pre></td></tr></table></figure><h3 id="使用文件">2.1 使用文件</h3><p>grep可以同时指定<strong>任意多个文件</strong>作为输入源，以下是对两个预先准备好的文件执行grep的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ grep <span class="hljs-string">&#x27;1&#x27;</span> user1.txt user2.txt <span class="hljs-comment"># 对多个文件进行过滤，过滤条件很简单，只要目标行包含了&quot;1&quot;这个字符，就会被筛选出来。</span><br>user1.txt:user1.txt<br>user1.txt:telephone number: 177****2269.<br>user2.txt:qq: 123456789.<br></code></pre></td></tr></table></figure><p>若给定的输入源包含<strong>目录</strong>，此时就需要使用选项<code>-r</code>递归地在目录及其子目录下的所有文件中搜索。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ grep -r <span class="hljs-string">&#x27;1&#x27;</span> user1.txt user2.txt ../tmp <span class="hljs-comment"># 不仅在user1.txt和user2.txt两个文件进行过滤，还在tmp这个目录下进行了递归的过滤，所以从结果中可以发现，过滤结果是翻了一倍。</span><br>user1.txt:user1.txt<br>user1.txt:telephone number: 177****2269.<br>user2.txt:qq: 123456789.<br>../tmp/user2.txt:qq: 123456789.<br>../tmp/user1.txt:user1.txt<br>../tmp/user1.txt:telephone number: 177****2269.<br></code></pre></td></tr></table></figure><h3 id="使用管道符">2.2 使用管道符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> user1.txt user2.txt | grep <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment"># 通过cat命令读取这两个文件的内容，并以管道符的形式发送给grpe命令。我们可以发现，过滤以后的结果较2.1相比，少了来源文件的信息。</span><br>user1.txt<br>telephone number: 177****2269.<br>qq: 123456789.<br></code></pre></td></tr></table></figure><h3 id="使用标准输入">2.3 使用标准输入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ grep <span class="hljs-string">&#x27;1&#x27;</span> - <span class="hljs-comment"># 当需要对键盘输入进行过滤时，只需要将输入源设置为&#x27;-&#x27;即可，若输入的内容符合正则表达式，会重新在界面上输出目标语句。</span><br>user1.txt<br>user1.txt<br>name: feng.<br>telephone number: 177****2269.<br>telephone number: 177****2269.<br></code></pre></td></tr></table></figure><h2 id="正则表达式">3 正则表达式</h2><p>因为以下的部分内容是拓展正则，所以建议使用正则时最好都加上选项<strong>-E</strong>，使用拓展正则的模式。</p><h3 id="锚点">3.1 锚点</h3><ul><li><strong>^word</strong>：匹配的内容必须以word开头。</li><li><strong>word$</strong>：匹配的内容必须以$结尾。</li></ul><h3 id="字符类">3.2 字符类</h3><ul><li><p><strong>[list]</strong>：将list字符串中的每个字符看作是单个元素，进而得到一个集合，匹配的内容必须包含集合中的某个元素。</p></li><li><p><strong>[n1-n2]</strong>：将一个范围内的同类型字符组合为list，例如[0-9]、[a-z]、[A-Z]。还可以和list混用，例如[abc0-2]代表abc012组成的集合。</p></li><li><p><strong>[^list]</strong>：对于集合取反。</p></li><li><p><strong>\w</strong>:英文字母和数字组成的集合。</p></li><li><p><strong>\W</strong>:对<strong>\w</strong>取反以后的结果。</p></li><li><p><strong>(|)</strong>：相较于<strong>[]</strong>使用单个字符作为元素，<strong>()</strong>使用字符串作为元素，进而组成集合，划分元素的方法是使用符合，这里匹配到的结果可以作为<strong>捕获</strong>，在后续根据<strong>\number</strong>取出第number个捕获的结果进行复用。</p></li><li><p>为了匹配一些特殊字符，<strong>[]</strong>中还提供了一些特殊的写法。</p><ul><li><p><strong>[:alnum:]</strong>：文字数字，这里的文字还包含了中文。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> user1.txt <br>user1.txt<br>name: feng.<br>telephone number: 177****2269.<br><br>西江月·世事一场大梦<br>    作者：苏轼<br>世事一场大梦，人生几度新〔秋〕凉？夜来风叶已鸣廊，看取眉头鬓上。<br>酒贱常愁客少，月明多被云妨。中秋谁与共孤光，把盏凄然北望。<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> user1.txt | grep -E <span class="hljs-string">&#x27;[[:alnum:]]*&#x27;</span><br>user1.txt<br>name: feng.<br>telephone number: 177****2269.<br><br>西江月·世事一场大梦<br>    作者：苏轼<br>世事一场大梦，人生几度新〔秋〕凉？夜来风叶已鸣廊，看取眉头鬓上。<br>酒贱常愁客少，月明多被云妨。中秋谁与共孤光，把盏凄然北望。<br></code></pre></td></tr></table></figure></li><li><p><strong>[:alpha:]</strong>：文字，这里的文字也包含中文。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> user1.txt <br>user1.txt<br>name: feng.<br>telephone number: 177****2269.<br><br>西江月·世事一场大梦<br>    作者：苏轼<br>世事一场大梦，人生几度新〔秋〕凉？夜来风叶已鸣廊，看取眉头鬓上。<br>酒贱常愁客少，月明多被云妨。中秋谁与共孤光，把盏凄然北望。<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> user1.txt | grep -E <span class="hljs-string">&#x27;[[:alpha:]]*&#x27;</span><br>user1.txt<br>name: feng.<br>telephone number: 177****2269.<br><br>西江月·世事一场大梦<br>    作者：苏轼<br>世事一场大梦，人生几度新〔秋〕凉？夜来风叶已鸣廊，看取眉头鬓上。<br>酒贱常愁客少，月明多被云妨。中秋谁与共孤光，把盏凄然北望。<br></code></pre></td></tr></table></figure></li><li><p><strong>[:punct:]</strong>：标点符号</p></li><li><p><strong>[:digit:]</strong>：数字</p></li><li><p><strong>[:xdigit:]</strong>：十六进制数字（0-9，a-f，A-F）</p></li><li><p><strong>[:graph:]</strong>：非空字符（不包括空格，不包括控制字符）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> user3.txt <br>namelibai<br>age 13<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ grep -E <span class="hljs-string">&#x27;[[:graph:]]*[[:cntrl:]][[:graph:]]*&#x27;</span> user3.txt -x <span class="hljs-comment"># 中间的制表符用cntrl匹配了，说明两边的graph，不仅不带空格，还不带控制字符。</span><br>namelibai<br></code></pre></td></tr></table></figure></li><li><p><strong>[:print:]</strong>：非空字符（包括空格，不包括控制字符）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> user3.txt <br>namelibai<br>age 13<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ grep -E <span class="hljs-string">&#x27;[[:print:]]*&#x27;</span> user3.txt -x <span class="hljs-comment"># 整行都匹配上的情况只有第二行，也就是集合中有空格，但是没有控制字符。</span><br>age 13<br></code></pre></td></tr></table></figure></li><li><p><strong>[:space:]</strong>：所有空白字符（换行，空格，制表符）</p></li><li><p><strong>[:lower:]</strong>：小写字符</p></li><li><p><strong>[:upper:]</strong>：大写字符</p></li><li><p><strong>[:cntrl:]</strong>：控制字符</p></li></ul></li></ul><h3 id="通配符">3.3 通配符</h3><ul><li><strong>.</strong>：用于匹配任意的单个字符</li><li><strong>\&lt;hell</strong>：用于匹配hello开头的单词。</li><li><strong>llo\&gt;</strong>：用于匹配llo结尾的单词。</li></ul><h3 id="量词">3.4 量词</h3><ul><li><strong>{N}</strong>：匹配前一个集合N次。集合的情况包含单个字符，使用<strong>[]</strong>组成以单个字符为元素的集合，使用<strong>()</strong>组成的以字符串为元素的集合。</li><li><strong>{N,M}</strong>：匹配前一个集合，至少N次，至多M次。</li><li><strong>{N,}</strong>：匹配前一个集合，至少N次，不设置上限。</li><li><strong>?</strong>：匹配前一个集合，零次或一次。</li><li><strong>*</strong>：匹配前一个集合，零次或多次。</li><li><strong>+</strong>：匹配前一个集合，一次或多次。</li></ul><h2 id="选项">4 选项</h2><p>接下来将会对<strong>/etc/hosts</strong>中的内容进行过滤，内容如下，后续不再赘述：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts<br>127.0.0.1localhost<br>127.0.1.1ubuntu<br>20.205.243.166  github.com<br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff00::0 ip6-mcastprefix<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters<br></code></pre></td></tr></table></figure><ul><li><p><strong>-a</strong>或<strong>--text</strong>：不要忽略二进制的内容。</p></li><li><p><strong>-Anumber</strong>或<strong>--after-context=number</strong>：在查询到匹配行之后，顺势给出后number行的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;github&#x27;</span> -A 3<br>20.205.243.166  github.com<br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br></code></pre></td></tr></table></figure></li><li><p><strong>-b</strong>或<strong>--byte-offset</strong>：查询到结果时，给出该行第一个字符在整个文件中的字符偏移量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;localhost&#x27;</span> -b<br>0:127.0.0.1localhost<br>123:::1     ip6-localhost ip6-loopback<br></code></pre></td></tr></table></figure></li><li><p><strong>-Bnumber</strong>或<strong>--before-context=number</strong>：查询到结果时，顺势给出前number行的内容，与-A相反。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;loopback&#x27;</span> -B 3<br>127.0.1.1ubuntu<br>20.205.243.166  github.com<br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::1     ip6-localhost ip6-loopback<br></code></pre></td></tr></table></figure></li><li><p><strong>-c</strong>或<strong>--count</strong>：计算匹配成功的行数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;localhost&#x27;</span> -c<br>2<br></code></pre></td></tr></table></figure></li><li><p><strong>-Cnumber</strong>或<strong>--context=number</strong>：查询到结果时，顺势给出上下各number行的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;loopback&#x27;</span> -C 3<br>127.0.1.1ubuntu<br>20.205.243.166  github.com<br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff00::0 ip6-mcastprefix<br>ff02::1 ip6-allnodes<br></code></pre></td></tr></table></figure></li><li><p><strong>-d动作</strong>或<strong>--directories=动作</strong>：当指定要查找的是目录而非文件时，必须使用此参数，动作一般使用recurse。但是这一项不怎么使用，可以直接使用-r实现该效果。</p></li><li><p><strong>-e正则表达式</strong>或<strong>--regexp=正则表达式</strong>：指定字符串做为查找文件内容的样式。这个选项的主要作用是可以同时使用多个正则表达式做匹配，进而获取并集的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E -e <span class="hljs-string">&#x27;local&#x27;</span>  -e <span class="hljs-string">&#x27;1&#x27;</span><br>127.0.0.1localhost<br>127.0.1.1ubuntu<br>20.205.243.166  github.com<br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff02::1 ip6-allnodes<br></code></pre></td></tr></table></figure></li><li><p><strong>-E</strong>或<strong>--extended-regexp</strong>：本次使用的正则表达式按照拓展正则进行解析。</p></li><li><p><strong>-f文件名字</strong>或<strong>--file=文件名字</strong>：指定规则文件，其内容含有一个或多个正则表达式样式，让grep查找符合条件的文件内容。注意，写到规则文件中的内容，并不需要单引号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> regul.txt <br><span class="hljs-built_in">local</span><br>1<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E -f regul.txt <br>127.0.0.1localhost<br>127.0.1.1ubuntu<br>20.205.243.166  github.com<br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff02::1 ip6-allnodes<br></code></pre></td></tr></table></figure></li><li><p><strong>-F</strong>或<strong>--fixed-regexp</strong>：将匹配模式视为固定字符串的列表，而不当作正则表达式使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;u.*tu&#x27;</span> <span class="hljs-comment"># 直接使用这个正则表达式时是可以匹配成功的。</span><br>127.0.1.1ubuntu<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E -F <span class="hljs-string">&#x27;u.*tu&#x27;</span> <span class="hljs-comment"># 同时使用-E和-F存在冲突。</span><br>grep: conflicting matchers specified<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -F <span class="hljs-string">&#x27;u.*tu&#x27;</span> <span class="hljs-comment"># 使用-F匹配该表达式以后，就匹配失败了，因为没有这样的字符串。</span><br></code></pre></td></tr></table></figure></li><li><p><strong>-G</strong>或<strong>--basic-regexp</strong>：将匹配模式当作普通的正则表达式使用，并不会按照拓展模式使用。</p></li><li><p><strong>-h</strong>或<strong>--no-filename</strong>：在显示匹配成功的结果时，不标识该行属于哪个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;u.*tu&#x27;</span> -h<br>127.0.1.1ubuntu<br></code></pre></td></tr></table></figure></li><li><p><strong>-H</strong>或<strong>--with-filename</strong>：在显示匹配成功的结果时，标识该行属于哪个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;u.*tu&#x27;</span> -H <span class="hljs-comment"># 这里给定的是管道符的输入，所以标识的来源为标准输入。</span><br>(standard input):127.0.1.1ubuntu<br></code></pre></td></tr></table></figure></li><li><p><strong>-i</strong>或<strong>--ignore-case</strong>：忽略字符串大小写的匹配。</p></li><li><p><strong>-l</strong>或<strong>--file-with-matches</strong>：在匹配成功后，并不是给出匹配成功的行，而是直接给文件的名称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;u.*tu&#x27;</span> -l<br>(standard input)<br></code></pre></td></tr></table></figure></li><li><p><strong>-L</strong>或<strong>--files-without-match</strong>：找出没有一处匹配成功的文件。</p></li><li><p><strong>-n</strong>或<strong>--line-number</strong>：在显示匹配成功的结果之前，标识该行所处的行数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;u.*tu&#x27;</span> -n<br>2:127.0.1.1ubuntu<br></code></pre></td></tr></table></figure></li><li><p><strong>-o</strong>或<strong>--only-matching</strong>：仅显示匹配成功的结果，而不是显示一整行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;u.*tu&#x27;</span> -o<br>ubuntu<br></code></pre></td></tr></table></figure></li><li><p><strong>-P</strong>：进入Perl风格的正则表达式，功能更加强大可以额外使用的功能包含如下几点：</p><ol type="1"><li><p><code>\K</code>用于需要匹配一部分内容，但是只想返回特定部分时，避免使用捕获组的场景。</p><p>例如，需要查询前缀前跟着的后缀值的场景，当只关心后缀值的情况下，可以使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;age: 13&quot;</span> | grep -P -o <span class="hljs-string">&quot;age: \K\d+&quot;</span> <span class="hljs-comment"># 此时会匹配到整段内容，虽然加了-o,但是也应该显示一段全部的内容，所以加了\k,可以忽略\K前面的内容。</span><br>13<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>-q</strong>或<strong>--quiet</strong>或<strong>--silent</strong>：不显示任何信息，即便匹配成功。</p></li><li><p><strong>-r</strong>或<strong>--recursive</strong>：在输入源包含<strong>目录</strong>时使用，递归处理目录中的每一个文件。</p></li><li><p><strong>-v</strong>或<strong>--invert-match</strong>：将结果取反，匹配成功的不要了，只取匹配失败的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;u.*tu&#x27;</span> -v<br>127.0.0.1localhost<br>20.205.243.166  github.com<br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff00::0 ip6-mcastprefix<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters<br></code></pre></td></tr></table></figure></li><li><p><strong>-w</strong>或<strong>--word-regexp</strong>：只有整个单词都匹配上了，才算匹配成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;ubun&#x27;</span><br>127.0.1.1ubuntu<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;ubun&#x27;</span> -w <span class="hljs-comment"># 这里虽然能找到127.0.1.1ubuntu存在ubun，但没有匹配上整个单词，所以还是匹配失败。</span><br></code></pre></td></tr></table></figure></li><li><p><strong>-x</strong>或<strong>--line-regexp</strong>：只有整行匹配上了，才算匹配成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;127\.0\.1\.1[[:space:]]ubu&#x27;</span><br>127.0.1.1ubuntu<br><span class="hljs-built_in">test</span>@ubuntu:~/tmp$ <span class="hljs-built_in">cat</span> /etc/hosts | grep -E <span class="hljs-string">&#x27;127\.0\.1\.1[[:space:]]ubu&#x27;</span> -x <span class="hljs-comment"># 这里虽然能够匹配上部分，但是没有匹配成功一整行，所以匹配失败。</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub个人网站搭建,使用fluid主题</title>
    <link href="/2024/09/07/GitHub%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/09/07/GitHub%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="安装node.jsgithexopandoc">1 安装node.js、git、hexo、pandoc</h2><h3 id="安装node.js以及npm">1.1 安装node.js以及npm</h3><p>在</p><p>下载对应的windows系统下安装包一路安装后，会附带npm的安装。</p><p>安装完成后，使用<code>node -v</code>测试node.js的安装情况，使用<code>npm -v</code>测试npm的安装情况。</p><h3 id="修改npm的配置路径">1.2 修改npm的配置路径</h3><p>使用命令<code>npm list -global</code>查看当前npm的默认存储位置。</p><p>在自定义的位置下新建两个文件夹node_global以及node_cache。</p><p>使用以下命令设置，并再次使用<code>npm list -global</code>检查。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;node_gloabl文件夹的全路径&#125;</span>&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;node_cache文件夹的全路径&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>使用命令<code>npm install express -g</code>测试，如果下载过程中出现问题，改用管理员身份进行下载，安装完成后使用再次使用<code>npm list -global</code>发现结果发生改变，并且在node_global文件夹下也出现了安装的内容，说明以后安装的内容都会在这个文件夹中。</p><h3 id="修改npm环境变量">1.3 修改npm环境变量</h3><p>打开windows下的环境变量设置，对<strong>Administrator的用户变量</strong>中Path进行修改，将原始的npm路径修改为node_global的路径；对<strong>系统变量</strong>进行新增，插入变量名为NODE_PATH，变量值为node_global下node_modules文件夹的全路径。</p><h3 id="安装git">1.4 安装git</h3><p>设置ssh，起码可以拉取自己的仓库，这部分不做详述。</p><h3 id="安装hexo以及依赖">1.5 安装hexo以及依赖</h3><p>使用命令<code>npm install hexo -g</code>安装hexo，使用命令<code>hexo -v</code>检验。</p><p>使用命令<code>npm install --save hexo-deployer-git</code>安装hexo依赖。</p><p>使用命令<code>npm install hexo-renderer-pandoc --save</code>安装pandoc渲染的依赖。</p><h3 id="安装pandoc">1.6 安装pandoc</h3><p>因为使用默认的markdown渲染工具可能会存在渲染不达预期的情况，比如粗体斜体或者公式等等，所以这里安装一下<strong>pandoc</strong>。</p><p>下载<ahref="https://github.com/jgm/pandoc/releases/tag/3.3">pandoc-3.3-windows-x86_64.zip</a>，在解压缩之后，将执行路径加入到环境变量的用户变量中。也即在用户变量的Path中新建一个pandoc.exe的全路径即可。</p><h2 id="建立个人博客">2 建立个人博客</h2><h3 id="创建git项目">2.1 创建git项目</h3><p>创建一个名为<code>$&#123;username&#125;.github.io</code>的git项目,并记录其<strong>ssh</strong>地址。</p><h3 id="初始化hexo">2.2 初始化hexo</h3><p>在系统上创建博客文件夹，并在其目录下执行<code>hexo init</code>,这会将hexo的项目从github上拉取下来。</p><p>接着将项目中的<strong>_config.yml</strong>配置文件中的deploy配置项按照如下规则进行修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">$&#123;2.1步中记录的ssh地址&#125;</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">$&#123;需要部署的分支的名字，自己决定是main还是master&#125;</span><br></code></pre></td></tr></table></figure><h3 id="设置网站主题">2.3 设置网站主题</h3><p>找一个自己喜欢的hexo主题，进行自定义设置。</p><p>可以在<a href="https://hexo.io/themes/">Themes |Hexo</a>搜索，也可以直接在GitHub上搜索hexo-theme开头的仓库，一般都是hexo的主题仓库。一般仓库中都会给出对应的安装教程。</p><h4 id="设置hexo-theme-fluid主题过程">2.3.1设置hexo-theme-fluid主题过程</h4><p>下载<ahref="https://github.com/fluid-dev/hexo-theme-fluid/releases">1.9.8版本的fluid</a>解压到<strong>themes</strong>目录下，并将解压出的文件夹重命名为<code>fluid</code>。</p><p>修改_config.yml中的相关配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>执行命令<code>hexo new page "about"</code>新建<strong>关于页</strong>，进而在<strong>/source/about/index.md</strong>中编辑<strong>关于页</strong>的内容，按照如下修改<strong>front-matter</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br></code></pre></td></tr></table></figure><p>执行命令<code>hexo new page "archives"</code>，创建<strong>归档</strong>页面，按照如下修改<strong>front-matter</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">archives</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">archive</span><br></code></pre></td></tr></table></figure><p>执行命令<code>hexo new page "tags"</code>，创建<strong>标签</strong>页面，后续在文章中使用标签tags，即可在<strong>标签</strong>页分类，按照如下修改<strong>front-matter</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">tag</span><br></code></pre></td></tr></table></figure><p>执行命令<code>hexo new page "categories"</code>，创建<strong>目录</strong>页面，后续在文章中使用标签categories，即可在<strong>目录</strong>页分类，按照如下修改<strong>front-matter</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">category</span><br></code></pre></td></tr></table></figure><p>执行命令<code>npm install --save hexo-theme-fluid</code>，替换为<strong>fluid</strong>主题。</p><h3 id="发布博客">2.4 发布博客</h3><h4 id="建立新的博客">2.4.1 建立新的博客</h4><p>执行命令<code>hexo new $&#123;博客名字&#125;</code>，即可在<strong>source/_posts</strong>下创建文章，进而编写自己的博客内容。</p><h4 id="发布博客-1">2.4.2 发布博客</h4><p>执行命令<code>hexo clean</code>清除缓存。</p><p>执行命令<code>hexo generate</code>生成静态文件。</p><p>执行命令<code>hexo deploy</code>推送项目到自己的github仓库中。</p><p>只要执行以上三步，就可以将本地的博客文件夹下的内容全部推送到刚刚新建的个人博客仓库中去。</p><h4 id="访问页面">2.4.3 访问页面</h4><p>此时，只要访问<code>$&#123;username&#125;.github.io</code>即可得到最终的结果。</p><h2 id="fluid主题优化">3 fluid主题优化</h2><h3 id="创建配置文件_config.fluid.yml">3.1创建配置文件<code>_config.fluid.yml</code></h3><p>因为_config.fluid.yml中的配置项优先级比_config.yml中更高，所以一些自定义修改内容，以后直接在这个配置文件中进行修改即可。如果修改完配置，并提交到了github仓库，可能并不会立即生效，可以稍等一会。</p><h3 id="网站通用配置">3.2 网站通用配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">index:</span> <span class="hljs-comment"># 首页资源</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/index_background.png</span> <span class="hljs-comment"># 背景图的路径,默认拼接到/source目录下</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span> <span class="hljs-comment"># 背景图的高度，范围是[0, 100]</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.0</span> <span class="hljs-comment"># 背景图的透明度</span><br>  <span class="hljs-attr">slogan:</span> <span class="hljs-comment"># 设置首页大图中的标题文字，就是打字机打出来的那个。</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">Hi</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 设置是否显示摘要，以下是编写摘要的格式</span><br><br><span class="hljs-attr">post:</span> <span class="hljs-comment"># 博客页面的设置</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/bg/blog_index_background.png</span> <span class="hljs-comment"># 博客页面在首页显示的封面图,在front-matter中设置的优先级更高。</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/blog_banner_background.png</span> <span class="hljs-comment"># 博客页面的背景图，在front-matter中设置的优先级更高。</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-attr">author:</span>  <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">date:</span>  <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>    <span class="hljs-attr">wordcount:</span>  <span class="hljs-comment"># 字数统计</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">min2read:</span>  <span class="hljs-comment"># 阅读时间</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br><br>  <span class="hljs-attr">category_bar:</span> <span class="hljs-comment"># 侧边栏展示当前分类下的文章</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [&quot;分类A&quot;]` 来指定分类</span><br>    <span class="hljs-comment"># If true, only set `category_bar: true` in Front-matter will enable sidebar of category, also set `category_bar: [&quot;CategoryA&quot;]` to specify categories</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 置于板块的左侧或右侧</span><br>    <span class="hljs-comment"># place in the board</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">right</span><br><br>    <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>    <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span><br>    <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>    <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;title&quot;</span><br><br>    <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>    <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span><br>    <span class="hljs-attr">post_limit:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 侧边栏展示文章目录</span><br>  <span class="hljs-comment"># Table of contents (TOC) in the sidebar</span><br>  <span class="hljs-attr">toc:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 置于板块的左侧或右侧</span><br>    <span class="hljs-comment"># place in the board</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span><br><br>    <span class="hljs-comment"># 目录会选择这些节点作为标题</span><br>    <span class="hljs-comment"># TOC will select these nodes as headings</span><br>    <span class="hljs-attr">headingSelector:</span> <span class="hljs-string">&quot;h1,h2,h3,h4,h5,h6&quot;</span><br><br>    <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span><br>    <span class="hljs-comment"># Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings</span><br>    <span class="hljs-attr">collapseDepth:</span> <span class="hljs-number">6</span><br><br>  <span class="hljs-comment"># 版权声明，会显示在每篇文章的结尾</span><br>  <span class="hljs-comment"># Copyright, will be displayed at the end of each post</span><br>  <span class="hljs-attr">copyright:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># CreativeCommons license</span><br>    <span class="hljs-comment"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span><br>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY&#x27;</span><br><br>    <span class="hljs-comment"># 显示作者</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 显示发布日期</span><br>    <span class="hljs-comment"># Show post date</span><br>    <span class="hljs-attr">post_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>    <span class="hljs-comment"># 显示更新日期</span><br>    <span class="hljs-comment"># Show update date</span><br>    <span class="hljs-attr">update_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>  <span class="hljs-comment"># 文章底部上一篇下一篇功能</span><br>  <span class="hljs-comment"># Link to previous/next post</span><br>  <span class="hljs-attr">prev_next:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章图片标题</span><br>  <span class="hljs-comment"># Image caption</span><br>  <span class="hljs-attr">image_caption:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章图片可点击放大</span><br>  <span class="hljs-comment"># Zoom feature of images</span><br>  <span class="hljs-attr">image_zoom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 [&#x27;-slim&#x27;, &#x27;&#x27;] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 [&#x27;re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/&#x27;, &#x27;&#x27;]</span><br>    <span class="hljs-comment"># The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: [&#x27;-slim&#x27;, &#x27;&#x27;] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: [&#x27;re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/&#x27;,&#x27;&#x27;]</span><br>    <span class="hljs-attr">img_url_replace:</span> [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br><br><span class="hljs-attr">archive:</span> <span class="hljs-comment"># 归档页面</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/archives_background.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br><span class="hljs-attr">category:</span> <span class="hljs-comment"># 分类页面</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/categories_background.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br><span class="hljs-attr">tag:</span> <span class="hljs-comment"># 标签页面</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/tags_background.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">tagcloud:</span> <span class="hljs-comment"># 改变标签显示的方式。</span><br>    <span class="hljs-attr">min_font:</span> <span class="hljs-number">15</span><br>    <span class="hljs-attr">max_font:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">unit:</span> <span class="hljs-string">px</span><br>    <span class="hljs-attr">start_color:</span> <span class="hljs-string">&quot;#BBBBEE&quot;</span> <span class="hljs-comment"># 最开始的颜色</span><br>    <span class="hljs-attr">end_color:</span> <span class="hljs-string">&quot;#337ab7&quot;</span> <span class="hljs-comment"># 鼠标移上去以后的颜色</span><br><br><span class="hljs-attr">about:</span> <span class="hljs-comment"># 关于页面</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/about_background.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/bg/avatar.png</span> <span class="hljs-comment"># 设置头像</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;锋&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;Hi&quot;</span><br>  <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/Astronaut-diode&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-bilibili-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://space.bilibili.com/415812264&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;Bilibili&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/img/bg/wechat_qrcode.jpg&quot;</span> &#125;<br><br><span class="hljs-attr">navbar:</span> <span class="hljs-comment"># 导航栏设置</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">锋的博客</span> <span class="hljs-comment"># 博客标题</span><br><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 页脚第一行文字的 HTML，最好是不设置，但是有点强迫症，还是隐了。</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-attr">code:</span> <span class="hljs-comment"># 代码块的配置</span><br>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否开启复制代码的按钮</span><br>  <span class="hljs-attr">highlight:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否开启代码高亮</span><br>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否开启行号</span><br>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span> <span class="hljs-comment"># 高亮的代码风格</span><br>    <span class="hljs-attr">highlightjs:</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&#x27;Github Gist&#x27;</span><br>      <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">prismjs:</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span><br>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-comment"># 用于浏览器标签的图标</span><br><span class="hljs-comment"># Icon for browser tab</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/bg/favicon.png</span><br><br><span class="hljs-comment"># 用于苹果设备的图标</span><br><span class="hljs-comment"># Icon for Apple touch</span><br><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/bg/favicon.png</span><br></code></pre></td></tr></table></figure><h3 id="front-matter配置">3.3 front-matter配置</h3><p>front-matter指的就是每篇博客前面写的那段配置内容。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">author:</span> <span class="hljs-string">作者名字</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">博客标题</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">摘要内容</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2035-04-07 00:00:00</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/bg/blog_index_background.png</span> <span class="hljs-comment"># 博客在首页的封面图</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/blog_banner_background.png</span> <span class="hljs-comment"># 博客页面的背景图</span><br><span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br><span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><span class="hljs-attr">tags:</span> <span class="hljs-comment"># 这里的标签是同级别的</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签A</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签B</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签C</span><br><span class="hljs-attr">categories:</span> <span class="hljs-comment"># 这里是多级分类的写法</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">分类1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">分类1的子分类1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">分类1的子分类1的子分类1</span><br></code></pre></td></tr></table></figure><h3 id="config.yml">3.4 _config.yml</h3><p>这里保存一下改动过的_config.yml，以作备份。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><br><br><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">锋的博客</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">锋</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://astronaut-diode.github.io/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><br><span class="hljs-comment"># Directory</span><br><span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span><br><span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span><br><span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span><br><span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span><br><span class="hljs-attr">i18n_dir:</span> <span class="hljs-string">:lang</span><br><span class="hljs-attr">skip_render:</span><br><br><span class="hljs-comment"># Writing</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Transform title into titlecase</span><br><span class="hljs-attr">external_link:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Open external links in new tab</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span> <span class="hljs-comment"># Apply to the whole site</span><br>  <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">future:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">syntax_highlighter:</span> <span class="hljs-string">highlight.js</span><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># Home page setting</span><br><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><br><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br><br><span class="hljs-comment"># Category &amp; Tag</span><br><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span><br><span class="hljs-attr">category_map:</span><br><span class="hljs-attr">tag_map:</span><br><br><span class="hljs-comment"># Metadata elements</span><br><span class="hljs-comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br><span class="hljs-attr">meta_generator:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Date / Time format</span><br><span class="hljs-comment">## Hexo uses Moment.js to parse and display date</span><br><span class="hljs-comment">## You can customize the date format as defined in</span><br><span class="hljs-comment">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span><br><span class="hljs-attr">time_format:</span> <span class="hljs-string">HH:mm:ss</span><br><span class="hljs-comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><br><span class="hljs-attr">updated_option:</span> <span class="hljs-string">&#x27;mtime&#x27;</span><br><br><span class="hljs-comment"># Pagination</span><br><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span><br><br><span class="hljs-comment"># Include / Exclude file(s)</span><br><span class="hljs-comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class="hljs-attr">include:</span><br><span class="hljs-attr">exclude:</span><br><span class="hljs-attr">ignore:</span><br><br><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:Astronaut-diode/Astronaut-diode.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>部署安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Fluid</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
